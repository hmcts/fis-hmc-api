buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.34")
  }
}


plugins {
  id 'java'
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.3'
  id 'org.springframework.boot' version '3.1.2'
  id 'org.owasp.dependencycheck' version '8.0.2'
  id 'com.github.ben-manes.versions' version '0.41.0'
  id 'org.sonarqube' version '4.3.0.3225'
  id 'idea'
  id 'au.com.dius.pact' version '4.1.7'
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom testRuntime

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom testRuntime

  contractTestImplementation.extendsFrom testImplementation
  smokeTest.extendsFrom testImplementation
  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaExec).configureEach {
  //javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang=ALL-UNNAMED','--add-opens=java.base/java.util=ALL-UNNAMED']
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
  useJUnitPlatform()
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy(aggregate)
  failFast = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  setTestClassesDirs(sourceSets.smokeTest.output.classesDirs)
  setClasspath(sourceSets.smokeTest.runtimeClasspath)
  include "uk/gov/hmcts/reform/hmc/api/**"
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
}

pmd {
  toolVersion = "6.41.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    //html.destination(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    xml.destination(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
  }
}

jacoco {
  toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.0
      }
    }
  }
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

def sonarExclusions = [
  '**/uk/gov/hmcts/reform/hmc/api/config/**',
  '**/uk/gov/hmcts/reform/hmc/api/model/**',
  '**/uk/gov/hmcts/reform/hmc/api/exceptions/**',
  '**/uk/gov/hmcts/reform/hmc/api/enums/**',
  '**/uk/gov/hmcts/reform/hmc/api/services/**',
  '**/uk/gov/hmcts/reform/hmc/api/controllers/HearingsController.java'
]


def versions = [
  awaitility                   : '4.0.2',
  bcpkixJdk15on                : '1.64',
  ccdClient                    : '4.9.2',
  commonsBeanUtils             : '1.9.4',
  commonsIo                    : '2.7',
  commonsLang3                 : '3.9',
  commonsMath3                 : '3.6.1',
  dumbster                     : '1.7.1',
  //feignHttpClient              : '10.3.0',
  googleAuth                   : '1.5.0',
  gradlePitest                 : '1.4.5',
  guava                        : '30.1-jre',
  hmctsNotify                  : '3.14.1-RELEASE',
  //  idamClient                   : '1.3.0',
  httpComponents               : '4.5.13',
  jackson                      : '2.14.0-rc1',
  jacksonDatatypeJsr           : '2.13.0',
  jsonAssert                   : '1.2.3',
  //  jsonPathAssert               : '2.2.0',
  junit                        : '4.13.1',
  junitPlatform                : '5.7.2',
  lombok                       : '1.18.26',
  pact                         : '4.1.11',
  pitest                       : '1.7.3',
  puppyCrawl                   : '8.43',
  reformPropertiesVolume       : '0.0.4',
  reformsJavaLogging           : '5.1.7',
  sendLetterClient             : '3.0.10',
  serenity                     : '2.3.10',
  serenityCucumber             : '1.9.50',
  serviceTokenGenerator        : '3.1.1',
  sonarPitest                  : '0.5',
  springSecurityCrypto         : '5.4.5',
  springSecurityRsa            : '1.0.9.RELEASE',
  springBoot                   : '2.7.14',
  springCloud                  : '3.1.1',
  tomcat                       : '9.0.69',
  unirest                      : '1.4.9',
  ccdCaseDocumentAmClient      : '1.7.3',
  pdfbox                       : '2.0.24'
]

sonarqube {
  properties {
    property "sonar.projectName", "fis :: fis-hmc-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:fis-hmc-api"
    property "sonar.exclusions", sonarExclusions.join(', ')
    property "sonar.coverage.exclusions", sonarExclusions.join(', ')
    property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/reports/jacoco.xml"
  }
}




// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  outputDirectory = 'build/reports/'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  //jcenter()
  maven { url 'https://jitpack.io' }
  //maven { url 'https://repo.spring.io/libs-milestone' }
}

ext {
  log4JVersion = '2.18.0'
  set('springCloudAzureVersion', "4.3.0")
  set('springCloudVersion', "2021.0.4")
}

dependencyManagement {
  imports {
    mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
  }
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '31.1-jre') {
      entry 'guava'
    }
    dependency group: 'org.yaml',name: 'snakeyaml', version: '1.31'
  }
}
dependencies {
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.8'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.1.1'
  implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0-rc1'
  implementation group: 'com.fasterxml.jackson', name: 'jackson-bom', version: '2.14.0-rc1', ext: 'pom'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.7.3'
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.9.1'
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '11.9.1'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.3'
  implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
  implementation group: 'io.springfox', name: 'springfox-spring-webflux', version: '3.0.0'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.1.0'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.1'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.9.2'
  implementation group: 'com.azure', name: 'azure-core', version: '1.21.0'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.14.2'
  implementation group: 'com.microsoft.azure', name: 'azure-servicebus', version: '3.6.7'
  implementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: '4.1.11'
  implementation group: 'au.com.dius.pact.consumer', name: 'java8', version: '4.1.11'
  implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
  // https://mvnrepository.com/artifact/cglib/cglib
  implementation group: 'cglib', name: 'cglib', version: '3.3.0'
  implementation('org.projectlombok:lombok:1.18.24')
  annotationProcessor 'org.projectlombok:lombok:1.18.24'

  testRuntimeOnly "org.junit.platform:junit-platform-commons:1.8.2"

  testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
  contractTestImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
  contractTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
  testImplementation 'org.apiguardian:apiguardian-api:1.0.0'
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: '2.3.10'
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.3.10'
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '2.3.10'
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: '2.3.10'

  testImplementation 'org.projectlombok:lombok:1.18.24'
  implementation 'org.projectlombok:lombok:1.18.24'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

group 'uk.gov.hmcts.reform.hmc.api'

bootJar {
  getArchiveFileName().set(provider {
    'fis-hmc-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

task fortifyScan(type: JavaExec)  {
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

processContractTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processSmokeTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation'
}

allprojects {

  def springBootVersion = versions.springBoot

  apply plugin: 'checkstyle'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'org.owasp.dependencycheck'

  group = 'uk.gov.hmcts.reform'
  version = '0.0.1'

  checkstyle.toolVersion = '9.2.1'
  checkstyle.configFile = new File(rootDir, "config/checkstyle/checkstyle.xml")
  checkstyle.maxWarnings(0)


  // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  tasks.withType(JavaExec).configureEach {
    //javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang=ALL-UNNAMED','--add-opens=java.base/java.util=ALL-UNNAMED']
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    //maven { url 'https://repo.spring.io/libs-milestone' }
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
    dependencies {
      dependencySet(
        group: 'com.fasterxml.jackson.core',
        version: versions.jackson
      ) {
        entry 'jackson-core'
        entry 'jackson-databind'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.datatype',
        version: versions.jackson
      ) {
        entry 'jackson-datatype-jdk8'
        entry 'jackson-datatype-jsr310'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.module',
        version: versions.jackson
      ) {
        entry 'jackson-module-parameter-names'
      }

      // solves CVE-2014-3488, CVE-2015-2156, CVE-2019-16869, CVE-2021-21409
      dependencySet(group: 'io.netty', version: '4.1.87.Final') {
        entry 'netty-buffer'
        entry 'netty-codec'
        entry 'netty-codec-http'
        entry 'netty-common'
        entry 'netty-handler'
        entry 'netty-resolver'
        entry 'netty-transport'
      }
      // CVE-2019-10086
      dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
      // CVE-2020-9484
      dependencySet(group: 'org.apache.tomcat.embed', version: versions.tomcat) {
        entry 'tomcat-embed-core'
        entry 'tomcat-embed-websocket'
        entry 'tomcat-embed-el'
      }
      //CVE-2017-18640
      dependency group: 'org.yaml',name: 'snakeyaml', version: '1.32'

    }
  }
}
