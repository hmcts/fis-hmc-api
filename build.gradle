buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://jitpack.io"
      content {
        excludeGroup "com.github.ben-manes.versions"
      }
    }

  }
  dependencies {
    classpath "net.serenity-bdd:serenity-gradle-plugin:2.4.34"
    classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.36.1070'
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.7.5'
  id 'org.owasp.dependencycheck' version '7.1.0.1'
  id 'com.github.ben-manes.versions' version '0.41.0'
  id 'org.sonarqube' version '3.3'
  id 'idea'
  id 'hmcts.ccd.sdk' version '0.25.16'
  id 'au.com.dius.pact' version '4.1.7'
  id 'com.diffplug.spotless' version '6.9.0'
}

apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

spotless {

  java {
    target 'src/**/*.java'
    importOrder()
    removeUnusedImports()
    trimTrailingWhitespace()
    indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
    googleJavaFormat('1.11.0').aosp().reflowLongStrings()

  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom testRuntime

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom testRuntime

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntime.extendsFrom testRuntime
  smokeTestCompile.extendsFrom testCompile

  contractTestImplementation.extendsFrom testImplementation
  contractTestRuntime.extendsFrom testRuntime
  contractTestCompile.extendsFrom testCompile
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
  useJUnitPlatform()
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy(aggregate)
  failFast = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  setTestClassesDirs(sourceSets.smokeTest.output.classesDirs)
  setClasspath(sourceSets.smokeTest.runtimeClasspath)
  include "uk/gov/hmcts/reform/hmc/api/**"
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.41.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

jacoco {
  toolVersion = "0.8.5"
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.0
      }
    }
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

def sonarExclusions = [
  '**/uk/gov/hmcts/reform/hmc/api/config/**',
  '**/uk/gov/hmcts/reform/hmc/api/model/**',
  '**/uk/gov/hmcts/reform/hmc/api/controllers/**',
  '**/uk/gov/hmcts/reform/hmc/api/services/**'
]

sonarqube {
  properties {
    property "sonar.projectName", "fis :: fis-hmc-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:fis-hmc-api"
    property "sonar.exclusions", sonarExclusions.join(', ')
    property "sonar.coverage.exclusions", sonarExclusions.join(', ')
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  outputDirectory = 'build/reports/'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
  jcenter()
}

ext {
  log4JVersion = '2.18.0'
  set('springCloudAzureVersion', "4.3.0")
  set('springCloudVersion', "2021.0.4")
}

dependencyManagement {
  imports {
    mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
  }
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '31.1-jre') {
      entry 'guava'
    }
    dependency group: 'org.yaml',name: 'snakeyaml', version: '1.31'
  }
}
dependencies {
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.8'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.1.1'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0-rc1'
  implementation group: 'com.fasterxml.jackson', name: 'jackson-bom', version: '2.14.0-rc1', ext: 'pom'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.7.3'
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.9.1'
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '11.9.1'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.3'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: '5.1.9'
  implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
  implementation group: 'io.springfox', name: 'springfox-spring-webflux', version: '3.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '4.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '2.0.0'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.8.6'
  implementation group: 'com.azure', name: 'azure-core', version: '1.21.0'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.4.2'
  implementation group: 'com.microsoft.azure', name: 'azure-servicebus', version: '3.6.5'
  compileOnly 'org.projectlombok:lombok:1.18.24'
  annotationProcessor 'org.projectlombok:lombok:1.18.24'

  testCompileOnly 'org.projectlombok:lombok:1.18.24'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

mainClassName = 'uk.gov.hmcts.reform.hmc.api.Application'

bootJar {
  getArchiveFileName().set(provider {
    'fis-hmc-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
