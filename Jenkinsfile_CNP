#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.AppPipelineConfig

def type = "java"
def product = "fis"
def component = "hmc-api"
def branchesToSync = ['demo']

GradleBuilder builder = new GradleBuilder(this, product)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  'fis-kv-${env}'    :[
    secret('hmc-topic-shared-access-key', 'HMC_TOPIC_SHARED_ACCESS_KEY'),
    secret('fis-hmc-api-s2s-secret', 'OIDC_S2S_SECRET'),
    secret('idam-hmc-fis-hearing-service-client-secret', 'HMC_FIS_HEARING_SERVICE_CLIENT_SECRET'),
    secret('idam-hmc-component-user-password', 'IDAM_HMC_COMPONENT_USER_PASSWORD')
  ]
]

def pipelineConf = new AppPipelineConfig()
pipelineConf.vaultSecrets = secrets

def vaultOverrides = [
  'preview': 'aat',
  'prod': 'aat',
]

withPipeline(type, product, component) {
  enableAksStagingDeployment()
  disableLegacyDeployment()
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  syncBranchesWithMaster(['demo', 'ithc', 'perftest'])
  enableSlackNotifications('#family-integration-devsch') //?

  after('test') {
    builder.gradle('integration')
    builder.gradle('jacocoTestReport')

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "main.html",
      reportName           : "Checkstyle Main Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "test.html",
      reportName           : "Checkstyle Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "functionalTest.html",
      reportName           : "Checkstyle Functional Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "integrationTest.html",
      reportName           : "Checkstyle Integration Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/test",
      reportFiles          : "index.html",
      reportName           : "Unit Tests Report"
    ]
  }

  after('functionalTest:preview') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : "index.html",
      reportName           : "Functional Tests Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/site/serenity/",
      reportFiles          : "index.html",
      reportName           : "Functional Tests Report"
    ]

    dir("${WORKSPACE}") {
      steps.archiveArtifacts artifacts: "**/*"
    }
  }

  after('functionalTest:aat') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : "index.html",
      reportName           : "Functional Tests Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/site/serenity/",
      reportFiles          : "index.html",
      reportName           : "Functional Tests Report"
    ]

    dir("${WORKSPACE}") {
      steps.archiveArtifacts artifacts: "**/*"
    }
  }

  after('smokeTest:preview') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/smoke",
      reportFiles          : "index.html",
      reportName           : "Smoke Test Report"
    ]
  }

  after('smokeTest:aat') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/smoke",
      reportFiles          : "index.html",
      reportName           : "Smoke Test Report"
    ]
  }


  onPR {
    env.ENVIRONMENT = "preview"
    env.CASE_API_URL = "https://fis-hmc-api-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.CASE_API_TEST_URL = "https://fis-hmc-api-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.CASE_DATA_STORE_BASEURL="http://ccd-data-store-api-demo.service.core-compute-demo.internal"
    env.AUTH_PROVIDER_SERVICE_CLIENT_BASEURL= "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal"
    env.HMC_CFT_HEARING_BASEURL = 'http://hmc-cft-hearing-service-demo.service.core-compute-demo.internal/hearings/'
    setCommonEnvVariables()
  }

  onMaster {
    env.ENVIRONMENT = "aat"
    env.CASE_API_URL = "http://fis-hmc-api-aat.service.core-compute-aat.internal"
    env.CASE_API_TEST_URL = "https://fis-hmc-api-staging.service.core-compute-aat.internal"
    env.CASE_DATA_STORE_BASEURL="http://ccd-data-store-api-demo.service.core-compute-demo.internal"
    env.AUTH_PROVIDER_SERVICE_CLIENT_BASEURL= "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal"
    env.HMC_CFT_HEARING_BASEURL = 'http://hmc-cft-hearing-service-demo.service.core-compute-demo.internal/hearings/'
    setCommonEnvVariables()
  }

  onDemo {
    env.ENVIRONMENT = "demo"
    env.CASE_API_URL = "http://fis-hmc-api-demo.service.core-compute-demo.internal"
    env.CASE_API_TEST_URL = "https://fis-hmc-api-demo.service.core-compute-demo.internal"
    env.HMC_CFT_HEARING_BASEURL = 'http://hmc-cft-hearing-service-demo.service.core-compute-demo.internal/hearings/'
  }

  onPerftest {
    env.ENVIRONMENT = "perftest"
    env.CASE_API_URL = "http://fis-hmc-api-perftest.service.core-compute-perftest.internal"
  }

  onIthc {
    env.ENVIRONMENT = "ithc"
    env.CASE_API_URL = "http://fis-hmc-api-ithc.service.core-compute-ithc.internal"
  }

}

def setCommonEnvVariables() {
  env.IDAM_API_URL_BASE = "https://idam-api.aatttt.platform.hmcts.net"
  env.IDAM_API_BASEURL = "https://idam-api.aatuuu.platform.hmcts.net"
  env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
}
